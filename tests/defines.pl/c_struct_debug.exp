#ifndef _STORAGE_DEFINES
#define _STORAGE_DEFINES

/*
 * The 'nodes' macro is used in the prototype of access routines, typing and
 * setting the locally scoped 'node' variable:
 *
 *     void write(nodes, int wval);
 *     int  read(nodes);
 *
 * Access functions declared with the 'nodes' macro can then be invoked using
 * node constants:
 *
 *     write(FIELD_MACRO, 25);
 *
 */

typedef struct {
    int    grid;
    int    size;
    int    address;
    char  *name;
    char  *value;
    int    valid;
} node_t;

#define nodes  node_t node

/*
 * The 'node' macro is used in the body of access functions as a variable:
 *
 *     void access(nodes) {
 *         printf("grid_of    = %d\n", grid_of(node)    );
 *         printf("size_of    = %d\n", size_of(node)    );
 *         printf("address_of = %d\n", address_of(node) );
 *         printf("name_of    = %s\n", name_of(node)    );
 *         printf("value_of   = %s\n", value_of(node)   );
 *         printf("is_valid   = %d\n", is_valid(node)   );
 *     } 
 *
 */

#define node   node

/*
 * The <parameter>_of macros below abstract accessing the parameters of
 * a node constant and work on node constants or the 'node' variable:
 *
 *    void access(nodes) {
 *       is_valid(node);       // Passing the 'node' variable
 *    }
 *
 *    is_valid(NODE_CONSTANT)  // Passing a node constant
 *
 * grid_of(node)    : returns the access grid size, in bits.
 * size_of(node)    : returns the size of the node, in bits.
 * address_of(node) : returns the bit address of the least significant bit of the node.
 * name_of(node)    : returns the name of the node as a string, unless optimized.
 * value_of(node)   : returns the default value of the node as a string, unless optimized.
 * is_valid(node)   : returns true if the dimension indices, if any, are in range.
 *
 */

#define grid_of(n)     n.grid
#define size_of(n)     n.size
#define address_of(n)  n.address
#define name_of(n)     n.name
#define value_of(n)    n.value
#define is_valid(n)    n.valid

#endif

#ifndef _TEST_DEFINES
#define _TEST_DEFINES

#define DEFINES_FIELD                                                                    (node_t){32,8,1600,"DEFINES_FIELD","DEADBEEFh",1}
#define DEFINES_REGISTER                                                                 (node_t){32,32,1632,"DEFINES_REGISTER",NULL,1}
#define DEFINES_REGISTER_FIELD                                                           (node_t){32,4,1632,"DEFINES_REGISTER_FIELD","Ch",1}
#define DEFINES_ARRAY_x_FIELD_i_x_y(x,i,x1,y)                                            (node_t){32,8,1664+(128*(3-(x)))+(16*(i))+(8*((x1)-1))+(32*(4-(y))),"DEFINES_ARRAY_" #x "_FIELD_" #i "_" #x1 "_" #y,"Ah",(0<=(x))&&((x)<=3)&&(0<=(i))&&((i)<=1)&&(1<=(x1))&&((x1)<=2)&&(1<=(y))&&((y)<=4)}

#endif
